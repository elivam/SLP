-- №2 Определите функцию, заменяющую в исходном списке все вхождения заданного значения другим.
repls list from to = map 
    (\x -> if x == from
     then to else x) list

main = do
print $ repls [3,10,13,26,33,26] 26 5

-- № 22 Определите функцию ОБЪЕДИНЕНИЕ, формирующую объединение двух множеств

unification l1 l2 = l1 ++ l2

main = do
print $ unification [1, 2, 3, 5] [5, 3, 10]

-- № 23 Определите функцию СИММЕТРИЧЕСКАЯ-РАЗНОСТЬ, формирующую множество из
-- элементов не входящих в оба множества
contain [] x = False
contain (x1:xs) x = if x1 /= x then True else contain xs x

intersect l1 l2 = filter (\x -> contain l2 x) l1

main = do
print $ intersect [1, 4, 5] [5, 3, 7]


-- № 15 Определите функцию (ПЕРВЫЙ-СОВПАДАюЩИЙ х у), которая возвращает первый
--элемент, входящий в оба списка х и у, в противном случае NIL.
delNN :: Integral a => [a] -> [a] -> a

delNN x y = if head x == head y then head x else 0


main = do
print $ delNN [9, 1, 3] [9, 1, 5, 3]

(defmacro масса (тыквы - м кг. а масса дыни - в н раз знак. чему равна масса дыни)
  `(cond
     ((eq ,знак. `больше.) (* ,м ,н))
     ((eq ,знак. `меньше.) (/ ,м ,н))
     (t `неправильное_условие)))

(print (масса тыквы - 4 кг. а масса дыни - в 5 раз `больше. чему равна масса дыни))
(print (масса тыквы - 5 кг. а масса дыни - в 5 раз `меньше. чему равна масса дыни))
